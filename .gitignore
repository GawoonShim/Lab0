/*************************************************************
  File:      RaptorBasics.ino
  Contents:  This program is a warmup for ME210 Lab 0, and
             serves as an introduction to event-driven programming 
  Notes:     Target: Arduino Leonardo
             Arduino IDE version: 1.6.7

  History:
  when       who  what/why
  ----       ---  ---------------------------------------------
  2016-01-09 MTP  program created
  2016-01-10 KN   Updated Raptorlib and RaptorProof to match
  2016-01-11 KLG  minor tweaks to make signed/unsigned consistent
 ************************************************************/
 
/*---------------Includes-----------------------------------*/

#include <Raptor.h>
#include <Timers.h>

/*---------------Module Defines-----------------------------*/

#define LIGHT_THRESHOLD    0 // *Choose your own thresholds* smaller at night
#define LINE_THRESHOLD    0 // *Choose your own thresholds*

#define ONE_SEC            1000
#define TIME_INTERVAL      ONE_SEC

#define TIMER_0            0
/*---------------Module Function Prototypes-----------------*/
void checkGlobalEvents(void);
void handleMoveForward(void);
void handleMoveBackward(void);
unsigned char TestTimer0Expired(void);
void RespTimer0Expired(void);
unsigned char TestForKey(void);
void RespToKey(void);
unsigned char TestForLightOn(void);
void RespToLightOn(void);
unsigned char TestForLightOff(void);
void RespToLightOff(void);
unsigned char TestForFence(void);
void RespToFence(void);
unsigned char TestTimer0Expired(void);
void RespTimer0Expired(void);

/*---------------State Definitions--------------------------*/
typedef enum {
   STATE_MOVE_FORWARD, STATE_MOVE_BACKWARD  //wat dis
} States_t;

/*---------------Module Variables---------------------------*/
States_t state;
unsigned char isLEDOn;
unsigned char isLightOn;
unsigned char lineDetected;
int LightValue;


/*---------------Raptor Main Functions----------------*/

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Serial.println("Hello, world!");
  state = STATE_MOVE_FORWARD;
  isLEDOn = false;
  //TMRArd_InitTimer(0, TIME_INTERVAL);
  
}

void loop() {   // put your main code here, to run repeatedly:
  detectLine();
  checkGlobalEvents();
  TestForLight();
  Serial.println(LightValue);
  while (isLightOn) { // when the light is off, it doesn't excecute within the while loop (the bool value doesn't print) but the robot does keep on moving
     TestForLight();
     Serial.println(isLightOn);
     TestForFence();
      if(!lineDetected) {
        dash(); 
      } else {
        rotateRight(); 
        reverse();
        dash();
        dash();
        dash();
      }
  }
}

/*  switch(state) {
    case STATE_MOVE_FORWARD:
      handleMoveForward();
      break;
    case STATE_MOVE_BACKWARD:
      handleMoveBackward();
      break;
    default: //Should never get into an unhandled state
      Serial.println("What is this I do not even..."); 
  }*/

/*----------------Module Functions--------------------------*/
void checkGlobalEvents(void) {
  if (TestTimer0Expired()) RespTimer0Expired();
  if (TestForKey()) RespToKey();
}



/*void handleMoveForward(void) {
  raptor.LeftMtrSpeed(25);
  raptor.RightMtrSpeed(25);
  delay(ONE_SEC); //originallly was one_sec *2, therefore blink every 2000ms (= 500Hz)
  state = STATE_MOVE_BACKWARD;
}

void handleMoveBackward(void) {
  raptor.LeftMtrSpeed(-25);
  raptor.RightMtrSpeed(-25);
  delay(ONE_SEC);// is this what makes it move?
  state = STATE_MOVE_FORWARD;
} */

unsigned char TestTimer0Expired(void) {
  return (unsigned char)(TMRArd_IsTimerExpired(TIMER_0));
}

void RespTimer0Expired(void) {
  static int Time = 0;
  
  TMRArd_InitTimer(TIMER_0, TIME_INTERVAL);
  if(isLEDOn) {
    isLEDOn = false;
    raptor.RGB(RGB_OFF);
  } else {
    isLEDOn = true;
    raptor.RGB(RGB_WHITE);
  }
}

unsigned char TestForKey(void) {
  unsigned char KeyEventOccurred;
  KeyEventOccurred = Serial.available();
  return KeyEventOccurred;
}

void RespToKey(void) {
  unsigned char theKey;
  
  theKey = Serial.read();
  Serial.print(theKey);
  Serial.print(", ASCII=");
  Serial.println(theKey,HEX);
}

void readLightLevel(void){  // works: lower threshold 50, high is 100
  unsigned int LightLevel(void);
  LightValue = raptor.LightLevel();
}

unsigned char TestForLight(void) {
  readLightLevel(); // works
  if (LightValue >= 200) {
    isLightOn = true;
  } else if (LightValue <= 150){ 
    isLightOn = false;
  }  
}

void detectLine(void){ // works: get the line values for data
  unsigned int LineRight(void);
  unsigned int LineCenter(void);
  unsigned int LineLeft(void);
  int Left = raptor.LineLeft();
  int Center = raptor.LineCenter();
  int Right = raptor.LineRight();
}

unsigned char TestForFence(void) { // detection works: glitch is that if lifted up, it registers as line detected
  void RGB(uint8_t R, uint8_t G, uint8_t B);
  unsigned char ReadTriggers(int threshold);
  char check = raptor.ReadTriggers(400); // if all sensors' values are higher than 400, then there is no line
  lineDetected = check;
  //Serial.println(lineDetected);
  //char mask = 0x15;
  //lineDetected = check & mask; // returns true if there is line 
}

void reverse(void){
    if (state == STATE_MOVE_FORWARD){
      state = STATE_MOVE_BACKWARD;
    } else if (state == STATE_MOVE_BACKWARD){
      state = STATE_MOVE_FORWARD;
    }
}

void rotateRight(void){
  raptor.LeftMtrSpeed(25);
  raptor.RightMtrSpeed(0);
  delay(ONE_SEC);
}


void dash(void) {
  if (state == STATE_MOVE_FORWARD) {
       raptor.LeftMtrSpeed(25);
       raptor.RightMtrSpeed(25);
        delay(ONE_SEC);
  }
  if (state == STATE_MOVE_BACKWARD) {
       raptor.LeftMtrSpeed(-25);
       raptor.RightMtrSpeed(-25);
        delay(ONE_SEC);
  }
}

void halt(void) {
     raptor.LeftMtrSpeed(0);
     raptor.RightMtrSpeed(0);
     delay(ONE_SEC);

}
